// This is your Prisma schema file for NeonDB (PostgreSQL)
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  pending
  completed
  cancelled
}

enum TableStatus {
  available
  unavailable
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  price           Int
  is_gram         Boolean          @default(false)
  category_id     Int
  category        Category         @relation(fields: [category_id], references: [id])
  orderItems      OrderItem[]
  productVariants ProductVariant[]
  is_deleted      Boolean          @default(false)

  @@map("products")
}

model ProductVariant {
  id          Int         @id @default(autoincrement())
  product_id  Int
  product     Product     @relation(fields: [product_id], references: [id])
  name        String
  description String?
  price       Int?
  orderItems  OrderItem[]
  is_deleted  Boolean     @default(false)

  @@map("product_variants")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String    @default("")
  products    Product[]
  is_deleted  Boolean   @default(false)

  @@map("categories")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  orders     Order[]
  is_deleted Boolean   @default(false)
  expenses   Expense[]

  @@map("users")
}

model Table {
  id           Int           @id @default(autoincrement())
  table_no     String
  orders       Order[]
  status       TableStatus   @default(available)
  is_deleted   Boolean       @default(false)
  reservations Reservation[]

  @@map("tables")
}

model Order {
  id           Int         @id @default(autoincrement())
  uuid         String
  table_id     Int
  table        Table       @relation(fields: [table_id], references: [id])
  user_id      Int
  user         User        @relation(fields: [user_id], references: [id])
  tax          Decimal
  total_amount Decimal
  grand_total  Decimal
  order_items  OrderItem[]
  buffet_id    Int?
  buffet       Buffet?     @relation(fields: [buffet_id], references: [id])
  people_count Int?
  is_buffet    Boolean     @default(false)
  status       OrderStatus @default(pending)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  payment      Payment?

  @@map("orders")
}

model PaymentMethod {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  image      String?
  payments   Payment[]
  is_deleted Boolean   @default(false)

  @@map("payment_methods")
}

model Payment {
  id                Int           @id @default(autoincrement())
  order_id          Int           @unique
  order             Order         @relation(fields: [order_id], references: [id])
  amount            Decimal
  paid_at           DateTime      @default(now())
  notes             String?
  payment_method_id Int
  payment_method    PaymentMethod @relation(fields: [payment_method_id], references: [id])

  @@map("payments")
}

model Buffet {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  orders      Order[]
  is_deleted Boolean @default(false)

  @@map("buffets")
}

model OrderItem {
  id         Int             @id @default(autoincrement())
  product_id Int
  product    Product         @relation(fields: [product_id], references: [id])
  order_id   Int
  order      Order           @relation(fields: [order_id], references: [id])
  variant_id Int?
  variant    ProductVariant? @relation(fields: [variant_id], references: [id])
  quantity   Int

  @@map("order_items")
}

model Reservation {
  id       Int      @id @default(autoincrement())
  name     String
  phone    String
  date     DateTime
  people   Int
  table_id Int      @unique
  table    Table    @relation(fields: [table_id], references: [id])

  @@map("reservations")
}

model Expense {
  id        Int      @id @default(autoincrement())
  title     String
  amount    Decimal
  category  String // e.g., rent, utilities, wages, maintenance
  note      String? // optional description
  paid_at   DateTime @default(now())
  user_id   Int // who logged the expense
  user      User     @relation(fields: [user_id], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("expenses")
}

model Discount {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  type       String // 'percent' or 'fixed'
  value      Decimal
  start_date DateTime
  end_date   DateTime
  is_active  Boolean  @default(true)

  @@map("discounts")
}
